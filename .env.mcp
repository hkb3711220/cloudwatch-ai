# CloudWatch MCP Server Environment Configuration (Direct Integration)
# Copy this file to .env and fill in your actual AWS credentials and settings

# ===============================
# AWS Configuration
# ===============================

# Option 1: Use AWS Profile (Recommended for development)
AWS_PROFILE=default
AWS_REGION=ap-northeast-1

# Option 2: Use explicit AWS credentials (for production/CI)
# AWS_ACCESS_KEY_ID=your_access_key_here
# AWS_SECRET_ACCESS_KEY=your_secret_key_here
# AWS_SESSION_TOKEN=your_session_token_here  # Only needed for temporary credentials

# ===============================
# MCP Server Configuration
# ===============================

# Server settings
MCP_SERVER_NAME=CloudWatch Logs Direct Integration
MCP_SERVER_VERSION=0.3.0
MCP_TRANSPORT=stdio  # stdio, sse, streamable-http
MCP_HOST=localhost
MCP_PORT=8000

# Performance settings
MCP_MAX_WORKERS=4
MCP_TIMEOUT=300  # 5 minutes in seconds

# Development settings
MCP_DEBUG=false
MCP_RELOAD=false

# ===============================
# Logging Configuration
# ===============================

LOG_LEVEL=INFO  # DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s

# ===============================
# Configuration File (Optional)
# ===============================

# Path to JSON configuration file (optional, overrides some env vars)
# MCP_CONFIG_FILE=.mcp_config.json

# ===============================
# Development/Testing
# ===============================

# Enable verbose logging for specific modules
# PYTHONPATH=.
# MCP_LOG_BOTO3=WARNING
# MCP_LOG_URLLIB3=WARNING

# ===============================
# Notes
# ===============================

# This MCP server now uses direct CloudWatch integration without AI agents.
# Only AWS credentials are required for CloudWatch access.
# 
# Available MCP Tools:
# - investigate_cloudwatch_logs: Direct log investigation using AWS APIs
# - list_available_log_groups: List CloudWatch log groups
# - analyze_log_patterns: Analyze log patterns and trends
# - test_connection: Test AWS CloudWatch connection
# - get_log_streams: Get log streams for a specific log group
# - get_recent_events: Get recent log events from a specific stream
# - get_request_metrics: Get MCP server request metrics
# - get_active_requests: Get currently active requests
#
# For Cursor MCP integration, add these environment variables to .cursor/mcp.json:
# {
#   "mcpServers": {
#     "cloudwatch-logs": {
#       "command": "uv",
#       "args": ["run", "python", "-m", "src.mcp.server"],
#       "cwd": "/path/to/cloudwatch-log-agent",
#       "env": {
#         "AWS_PROFILE": "your-aws-profile",
#         "AWS_REGION": "your-aws-region"
#       }
#     }
#   }
# } 